# Gerenciamento-de-Eventos

-- Criação do Banco de Dados
CRIAR BANCO DE DADOS GerenciamentoEventos;
USE GerenciamentoEventos;

-- Criação das Tabelas

-- Tabela de Eventos
CRIAR TABELA Eventos (
    id_evento INT AUTO_INCREMENT CHAVE PRIMÁRIA,
    nome_evento VARCHAR(100) NÃO NULO,
    data_evento DATA NÃO NULA,
    local_evento VARCHAR(255),
    descrição TEXTO
);

-- Tabela de Participantes
CRIAR TABELA Participantes (
    id_participante INT AUTO_INCREMENT CHAVE PRIMÁRIA,
    nome VARCHAR(100) NÃO NULO,
    e-mail VARCHAR(100) NÃO NULO ÚNICO,
    telefone VARCHAR(20)
);

-- Tabela de Inscrições
CRIAR TABELA Inscrições (
    id_inscricao INT AUTO_INCREMENT CHAVE PRIMÁRIA,
    id_evento INT,
    id_participante INT,
    data_inscricao DATA NÃO NULA,
    REFERÊNCIAS DE CHAVE ESTRANGEIRA (id_evento) Eventos(id_evento),
    CHAVE ESTRANGEIRA (id_participante) REFERÊNCIAS Participantes(id_participante)
);

-- Inserção de Dados

-- Inserir Eventos
INSERT INTO Eventos (nome_evento, data_evento, local_evento, descrição) VALUES
('Workshop de SQL', '2024-09-10', 'Auditório 1', 'Workshop para aprender SQL.'),
('Conferência de Tecnologia', '2024-10-05', 'Centro de Convenções', 'Conferência sobre novas tecnologias.'),
('Seminário de Marketing', '2024-11-20', 'Sala 3', 'Seminário sobre estratégias de marketing.');

-- Inserir Participantes
INSERT INTO Participantes (nome, email, telefone) VALORES
('Lucas Almeida', 'lucas.almeida@email.com', '1111-2222'),
('Fernanda Costa', 'fernanda.costa@email.com', '3333-4444'),
('João Pereira', 'joao.pereira@email.com', '5555-6666');

-- Inserir Inscrições
INSERT INTO Inscrições (id_evento, id_participante, data_inscricao) VALORES
(1, 1, '2024-08-15'),
(1, 2, '2024-08-20'),
(2, 1, '2024-09-01'),
(3, 3, '2024-10-10'),
(3, 2, '2024-10-12');

-- Consultas e Relatórios

-- 1. Mostrar todos os eventos disponíveis
SELECIONE * DE Eventos;

-- 2. Consultar a lista de participantes inscritos em um evento específico (por exemplo, evento com id_evento = 1)
SELECIONAR
    p.nome AS nome_participante,
    p.e-mail,
    p.telefone
DE Inscrições i
JOIN Participantes p ON i.id_participante = p.id_participante
ONDE i.id_evento = 1;

-- 3. Verifique todos os eventos nos quais um determinado participante está inscrito (por exemplo, participante com id_participante = 1)
SELECIONAR
    e.nome_evento,
    e.data_evento,
    e.local_evento
DE Inscrições i
JOIN Eventos e ON i.id_evento = e.id_evento
ONDE i.id_participante = 1;

-- Atualizações de Dados

-- 1. Atualizar informações de um evento (exemplo: alterar dados e local do evento com id_evento = 1)
ATUALIZAÇÃO Eventos
SET local_evento = 'Auditório 2', data_evento = '2024-09-12'
ONDE id_evento = 1;

-- 2. Modificar informações de contato de um participante (exemplo: atualizar telefone do participante com id_participante = 1)
ATUALIZAÇÃO Participantes
SET telefone = '7777-8888'
ONDE id_participante = 1;

-- Exclusão de Dados

-- 1. Remove eventos passados ​​do banco de dados (exemplo: remove evento com id_evento = 2)
EXCLUIR DE Eventos
ONDE id_evento = 2;

-- 2. Cancelar inscrição de participantes para determinados eventos (exemplo: cancelar inscrição com id_inscricao = 1)
APAGAR DE Inscrições
ONDE id_inscricao = 1;

-- Tarefas Adicionais

-- 1. Listar todos os participantes que se inscreveram em mais de um evento
SELECIONAR
    p.nome,
    p.e-mail,
    COUNT(i.id_evento) COMO total_eventos
DE Inscrições i
JOIN Participantes p ON i.id_participante = p.id_participante
GRUPO POR p.id_participante
TENDO CONTAGEM(i.id_evento) > 1;

-- 2. Criar uma interface simples para interagir com o sistema (Exemplo: consultas básicas são as interfaces)
-- Interface SQL já básica com consultas e relatórios acima.
